/* @tailwind base; */
@tailwind components;
@tailwind utilities;

/* Base styles */
html {
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizelegibility;
  font-family:
    Segoe UI,
    SegoeUI,
    Helvetica Neue,
    Helvetica,
    Arial,
    sans-serif;
  @apply max-w-5xl mx-auto sm:px-4;
}

/* Light mode default */
body {
  @apply bg-white text-neutral-900;
}

a[aria-current] {
  font-weight: bold;
}

a:hover {
  text-decoration: underline;
}

nav a {
  padding: 0.5rem 0.5rem;
  text-decoration: none;
  color: #0065b3;
}

nav a:hover {
  color: #0065b3;
}

/* Dark mode styles */
@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }

  body {
    @apply bg-neutral-900 text-neutral-200;
  }

  nav a {
    /* microsoft docs blue */
    color: #75b6e7;
    text-decoration: none;
  }

  nav a:hover {
    color: #278cda;
    text-decoration: underline;
  }
}

/* Light mode styles */
/* You can override light mode specific styles here if needed */

/* code { */
/*   font-family: */
/*     JetBrains Mono, */
/*     monospace; */
/*   font-size: 1rem; */
/*   color: #75b6e7; */
/*   background-color: rgb(117 182 231 / 0.3); */
/*   padding-top: 0.125rem; */
/*   padding-bottom: 0.125rem; */
/*   padding-left: 0.25rem; */
/*   padding-right: 0.25rem; */
/*   border-radius: 0.25rem; */
/* } */

/*   Open state of the dialog  */
dialog[open] {
  opacity: 1;
  transform: scale(1);
  transition: all 0.5s ease allow-discrete;
}

/*   Closed state of the dialog   */
dialog {
  opacity: 0;
  transform: scale(0.5);
  transition: all 0.5s ease allow-discrete;
}

/*   Before-open state  */
/* Needs to be after the previous dialog[open] rule to take effect,
    as the specificity is the same */
@starting-style {
  dialog[open] {
    opacity: 0;
    transform: scale(0.8);
  }
}

/* Transition the :backdrop when the dialog modal is promoted to the top layer */
dialog::backdrop {
  background-color: rgb(0 0 0 / 0%);
  transition: all 0.5s ease allow-discrete;
}

dialog[open]::backdrop {
  backdrop-filter: blur(8px);
  background-color: rgb(0 0 0 / 25%);
  transition: all 0.5s ease allow-discrete;
}

/* This starting-style rule cannot be nested inside the above selector
because the nesting selector cannot represent pseudo-elements. */

@starting-style {
  dialog[open]::backdrop {
    backdrop-filter: blur(0px);
    background-color: rgb(0 0 0 / 0%);
  }
}

input {
  min-width: 240px;
}

.btn {
  @apply font-bold py-2 px-4;
}

.success {
  background-color: green;
}

.error {
  color: #efd9fd;
  background-color: #3b2e58;
  border: 1px solid #3b2e58;
  padding: 0.25rem 0.5rem;
}

.fadeIn {
  animation: 300ms fadeIn cubic-bezier(0.2, 0, 0, 1);
}

.fadeOut {
  animation: 150ms fadeOut cubic-bezier(0.3, 0.1, 1, 1);
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

@keyframes fadeOut {
  from {
    opacity: 1;
  }

  to {
    opacity: 0;
  }
}

/* transitionTimingFunction: { */
/* 	'standard': 'cubic-bezier(0.2, 0, 0, 1)', */
/* 	'standard-decelerate': 'cubic-bezier(0, 0, 0, 1)', */
/* 	'standard-accelerate': 'cubic-bezier(0.3, 0.1, 1, 1)', */
/* 	'emphasized-decelerate': 'cubic-bezier(0.05, 0.7, 0.1, 1.0)', */
/* 	'emphasized-accelerate': 'cubic-bezier(0.3, 0.0, 0.8, 0.15)' */
/* } */

.slideIn {
  animation: 450ms slideIn cubic-bezier(0.2, 0, 0, 1);
}

.slideOut {
  animation: 200ms slideOut cubic-bezier(0.2, 0, 0, 1);
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translate(100px, 0px);
  }

  to {
    opacity: 1;
    transform: translate(0px, 0px);
  }
}

@keyframes slideOut {
  from {
    opacity: 1;
    transform: translate(0px, 0px);
  }

  to {
    opacity: 0;
    transform: translate(-25vw, 0);
  }
}

.slideInBack {
  animation: 450ms slideInBack cubic-bezier(0.2, 0, 0, 1);
}

.slideOutBack {
  animation: 200ms slideOutBack cubic-bezier(0.2, 0, 0, 1);
}

@keyframes slideInBack {
  from {
    opacity: 0;
    transform: translate(-100px, 0);
  }

  to {
    opacity: 1;
    transform: translate(0px, 0px);
  }
}

@keyframes slideOutBack {
  from {
    opacity: 1;
    transform: translate(0px, 0px);
  }

  to {
    opacity: 0;
    transform: translate(25vw, 0);
  }
}
